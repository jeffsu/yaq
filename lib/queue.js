// Generated by CoffeeScript 1.6.3
(function() {
  var ATTRS, EventEmitter, HOSTNAME, Job, NOOP, PID, Queue, code, os, redis;

  redis = require('redis');

  EventEmitter = require('events').EventEmitter;

  os = require('os');

  code = require('./code');

  Job = require('./job');

  HOSTNAME = os.hostname();

  PID = process.pid;

  ATTRS = ['data', 'failures', 'progress'];

  NOOP = function() {};

  /*
  Redis Data
  name:all        sorted set
  name:queued     sorted set
  name:processing sorted set
  name:failed     sorted set
  name:completed  sorted set
  name:data       hash
  
  name:<id>:log list
  */


  Queue = (function() {
    function Queue(name, options) {
      this.name = name;
      this.retries = options.retries || 0;
      this.redis = redis.createClient();
      this.pubsub = redis.createClient();
      this.redis.dbug_mode = true;
      this.redis.sadd('yaq:queues', this.name, NOOP);
      this.ee = new EventEmitter;
    }

    Queue.prototype.counts = function(cb) {
      var m;
      m = this.redis.multi();
      m.zcard(this.name + ':queued');
      m.zcard(this.name + ':processing');
      m.scard(this.name + ':failed');
      m.scard(this.name + ':completed');
      return m.exec(function(err, results) {
        if (err) {
          return cb(err);
        }
        return cb(err, {
          queued: results[0],
          processing: results[1],
          failed: results[2],
          completed: results[3]
        });
      });
    };

    Queue.prototype.clean = function(cb) {
      if (cb == null) {
        cb = NOOP;
      }
      return this.redis["eval"](code.clean, 2, this.name, Date.now(), cb);
    };

    Queue.prototype.clear = function(cb) {
      if (cb == null) {
        cb = NOOP;
      }
      return this.redis["eval"](code.clear, 1, this.name, cb);
    };

    Queue.prototype.push = function(options, cb) {
      var job;
      if (cb == null) {
        cb = NOOP;
      }
      job = new Job(this, options);
      return this.redis["eval"](code.push, 2, this.name, job.toJSON(), function(err, res) {
        if (err) {
          return cb(err);
        }
        return cb(err, res ? job : false);
      });
    };

    Queue.prototype.process = function(cb) {
      var _this = this;
      return this.redis["eval"](code.process, 4, this.name, HOSTNAME, PID, Date.now(), function(err, id) {
        if (err) {
          return cb(err);
        }
        if (id) {
          return _this.find(id, cb);
        } else {
          return cb(null, null);
        }
      });
    };

    Queue.prototype.find = function(id, cb) {
      return Job.find(this, id, cb);
    };

    Queue.prototype.on = function() {
      return this.ee.on.apply(this.ee, arguments);
    };

    return Queue;

  })();

  module.exports = Queue;

}).call(this);
