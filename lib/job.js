// Generated by CoffeeScript 1.6.3
(function() {
  var Job, LONGTIME, NOOP, PRIORITIES, code, uuid;

  uuid = require('uuid');

  code = require('./code');

  PRIORITIES = {
    high: 10,
    med: 50,
    low: 100
  };

  LONGTIME = 1000 * 60 * 60 * 24;

  NOOP = function() {};

  Job = (function() {
    function Job(q, options) {
      this.q = q;
      this.me = {};
      this.me.data = options.data || {};
      this.me.timeout = parseInt(options.timeout || LONGTIME);
      this.me.id = options.id || uuid.v4();
      this.me.priority = options.priority || 'med';
      this.me.retries = options.retries || 0;
      this.host = options.host;
      this.host = options.pid;
      this.failures = options.failures;
      this.status = options.status;
      this.id = this.me.id;
    }

    Job.prototype.log = function(msg, cb) {
      if (cb == null) {
        cb = NOOP;
      }
      return this.q.redis.append("" + this.q.name + ":logs:" + this.id, "," + msg, cb);
    };

    Job.prototype.progress = function(n, cb) {
      if (cb == null) {
        cb = NOOP;
      }
      return this.q.redis.hset("" + this.q.name + ":progress", this.id, n, cb);
    };

    Job.prototype.getLogs = function(cb) {
      return this.q.redis.get("" + this.q.name + ":logs:" + this.id, function(err, str) {
        if (err) {
          return cb(err);
        }
        return cb(null, JSON.parse('[' + str.replace(/^,/, "") + ']'));
      });
    };

    Job.prototype.getProgress = function(cb) {
      return this.q.redis.hget("" + this.q.name + ":progress", this.id, function(err, str) {
        if (err) {
          return cb(err);
        }
        return cb(null, parseFloat(str));
      });
    };

    Job.prototype.toJSON = function() {
      return JSON.stringify(this.me);
    };

    Job.prototype.finish = function(err, cb) {
      if (err == null) {
        err = null;
      }
      if (cb == null) {
        cb = NOOP;
      }
      return this.q.redis["eval"](code.finish, 4, this.q.name, this.id, Date.now(), err, function(err, res) {
        return cb(err, res === 1);
      });
    };

    return Job;

  })();

  Job.find = function(q, id, cb) {
    return q.redis["eval"](code.find, 2, q.name, id, function(err, results) {
      var data, failures, host, options, pid, progress, status;
      if (err || !results) {
        return cb(err);
      }
      data = results[0], progress = results[1], host = results[2], pid = results[3], failures = results[4], status = results[5];
      options = JSON.parse(data);
      options.progress = parseFloat(progress);
      options.host = host;
      options.pid = parseInt(pid);
      options.failures = parseInt(failures);
      options.status = status;
      return cb(err, new Job(q, options));
    });
  };

  module.exports = Job;

}).call(this);
